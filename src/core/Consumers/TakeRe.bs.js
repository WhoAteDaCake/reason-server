// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var UtilsRe$ReactTemplate = require("../UtilsRe.bs.js");

function take(max, source, start, sink) {
  var count = [0];
  var sourceTalkback = [/* Nothing */0];
  var talkback = /* Talkback */Block.__(1, [(function (action, data) {
          if (count[0] < max) {
            return UtilsRe$ReactTemplate.whenTalk(sourceTalkback[0], (function (talk) {
                          return Curry._2(talk, action, data);
                        }));
          } else {
            return 0;
          }
        })]);
  if (start !== 0) {
    return /* () */0;
  } else {
    return Curry._2(source, /* Start */0, /* Talkback */Block.__(1, [(function (action, data) {
                      switch (action) {
                        case 0 : 
                            sourceTalkback[0] = data;
                            return UtilsRe$ReactTemplate.whenTalk(sink, (function (talk) {
                                          return Curry._2(talk, /* Start */0, talkback);
                                        }));
                        case 1 : 
                            if (count[0] === max) {
                              UtilsRe$ReactTemplate.whenTalk(sourceTalkback[0], (function (talk) {
                                      return Curry._2(talk, /* End */2, /* Nothing */0);
                                    }));
                              return UtilsRe$ReactTemplate.whenTalk(sink, (function (talk) {
                                            return Curry._2(talk, /* End */2, /* Nothing */0);
                                          }));
                            } else {
                              UtilsRe$ReactTemplate.whenTalk(sink, (function (talk) {
                                      return Curry._2(talk, action, data);
                                    }));
                              count[0] = count[0] + 1 | 0;
                              return /* () */0;
                            }
                        case 2 : 
                            return UtilsRe$ReactTemplate.whenTalk(sink, (function (talk) {
                                          return Curry._2(talk, action, data);
                                        }));
                        
                      }
                    })]));
  }
}

exports.take = take;
/* No side effect */
